#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use File::Basename;
use Getopt::Long;

my $version = 0.20091118;
my $prog = basename($0);

my $do_install = undef;
my $do_uninstall = undef;
my $cap_password = "";

my $usage = "Usage: $prog -[un]install [-password=CAP_USER_PASSWORD]\n";

GetOptions(install => \$do_install, uninstall => \$do_uninstall, 'password=s' => \$cap_password) or die($usage);

my @install = (
    'CREATE DATABASE IF NOT EXISTS cap DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci',

    'CREATE TABLE IF NOT EXISTS cap.lexicon (' .
    '   id INT PRIMARY KEY AUTO_INCREMENT,' .
    '   language VARCHAR(15) DEFAULT NULL,' .
    '   path VARCHAR(255) DEFAULT NULL,' .
    '   message TEXT,' .
    '   value TEXT,' .
    '   notes TEXT' .
    ')',

    'CREATE TABLE IF NOT EXISTS cap.master_image (' .
    '   id VARCHAR(128) PRIMARY KEY,' .
    '   path VARCHAR(128) NOT NULL,' .
    '   format VARCHAR(32) NOT NULL,' .
    '   ctime INT NOT NULL,' .
    '   bytes INT NOT NULL,' .
    '   md5 VARCHAR(32) NOT NULL' .
    ')',

    'CREATE TABLE IF NOT EXISTS cap.pimg_cache (' .
    '   id  VARCHAR(128) NOT NULL,' .
    '   format VARCHAR(32) NOT NULL,' .
    '   size INT NOT NULL,' .
    '   rot INT NOT NULL,' .
    '   data LONGBLOB NOT NULL,' .
    '   ctime INT NOT NULL,' .
    '   atime DATETIME NOT NULL,' .
    '   acount INT NOT NULL,' .
    '   PRIMARY KEY(id, format, size, rot)' .
    ')',

    'CREATE TABLE IF NOT EXISTS cap.user (' .
    '   id INT PRIMARY KEY AUTO_INCREMENT,' .
    '   username VARCHAR(32) UNIQUE NOT NULL,' .
    '   password VARCHAR(50),' .
    '   email VARCHAR(128),' .
    '   name VARCHAR(128),' .
    '   active INT NOT NULL' .
    ')',

    'CREATE TABLE IF NOT EXISTS cap.role (' .
    '   id INT PRIMARY KEY AUTO_INCREMENT,' .
    '   role VARCHAR(128) UNIQUE NOT NULL' .
    ')',

    'CREATE TABLE IF NOT EXISTS cap.sessions (' .
    '   id CHAR(72) PRIMARY KEY,' .
    '   session_data TEXT,' .
    '   expires INT(10)' .
    ')',

    'CREATE TABLE IF NOT EXISTS cap.user_role (' .
    '   user_id INT,' .
    '   role_id INT,' .
    '   PRIMARY KEY(user_id, role_id)' .
    ')',

    'CREATE TABLE IF NOT EXISTS cap.labels (' .
    '  field VARCHAR(32),' .
    '  code VARCHAR(32),' .
    '  lang VARCHAR(2),' .
    '  label VARCHAR(128),' .
    '  PRIMARY KEY(field, code, lang)' .
    ')',

    "CREATE USER 'cap'\@'localhost' IDENTIFIED BY '$cap_password'",

    "GRANT SELECT, INSERT, UPDATE, DELETE ON cap.* to 'cap'\@'localhost'",
);

my @uninstall = (
    "DROP USER 'cap'\@'localhost'",

    'DROP DATABASE cap',
);

if ($do_install) {
    my $dbh = db_connect();
    foreach my $sql (@install) {
        $dbh->do($sql) or die("SQL statement failed. Reason: " . $dbh->errstr . ". SQL:\n$sql\n");
    }
}
elsif ($do_uninstall) {
    print("WARNING: this will completely remove the cap database and user from the system. Are you sure you want to do this? [y/N]: ");
    chomp(my $confirm = <STDIN>);
    unless ($confirm =~ /^y(es)?$/i) {
        die("Aborting.\n");
    }
    my $dbh = db_connect();
    foreach my $sql (@uninstall) {
        $dbh->do($sql) or die("SQL statement failed. Reason: " . $dbh->errstr . ". SQL:\n$sql\n");
    }
}
else {
    die($usage);
}

sub db_connect
{
    print("Database administrator name: ");
    chomp(my $username = <STDIN>);
    print("Database administrator password: ");
    chomp(my $password = <STDIN>);

    my $dbh = DBI->connect('DBI:mysql:', $username, $password) or die("Failed to connect to database: " . DBI->errstr . "\n");
    return $dbh;
}

=head1 NAME

mysql-setup - install/uninstall script for the CAP MySQL database

=head1 SYNOPSIS

mysql-setup -[un]install  [-password=I<CAP_USER_PASSWORD>]

=head1 DESCRIPTION

Installs or uninstalls the cap MySQL database and creates the database
user I<cap>. If you specify the C<-password> option, the I<cap> user will
be given the selected password. Otherwise, no password will be set.

You will be prompted for a database administrator username and password
before connecting to the database. The C<-install> option does not
overwrite existing tables, so if you want to make sure that the database
structure is completely up to date, run C<-uninstall> first. Note that
C<-uninstall> completely wipes out both the database and the I<cap>
database user, so make sure this is really what you want before using this
option.

=head1 BUGS

If the I<cap> user already exists, C<-install> will die with an error
because it cannot create the user. You will still probably have a working
system, but the outcome is unclear.

Any sort of database failure may leave you with a
half-installed/uninstalled database. If this happens, it is best to run
C<-uninstall> before trying again.

The password prompt echoes the password on-screen. This needs to be fixed
so that the password is not echoed.

=head1 COPYRIGHT

(c) 2009 Canadiana.org.

This program is free software. It may be distributed under the terms of the GNU General Public License (GPL) version 3 or later.

=head1 AUTHOR

William Wueppelmann <william.wueppelmann@canadiana.ca>

=cut
