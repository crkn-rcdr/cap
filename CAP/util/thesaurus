#!/usr/bin/perl
use strict;
use warnings;
use utf8;

use XML::LibXML;
use XML::LibXML::XPathContext;
use FindBin;
use lib "$FindBin::Bin/../lib";
use CAP;

my $c = CAP->new();

foreach my $file (@ARGV) {
#    add_marc($file);
    add_dc($file);
}

#while (my $file = <STDIN>) {
#    chomp($file);
#    warn("Adding $file\n");
#    #add_marc($file);
#    add_dc($file);
#}


# Add parliamentary hiserarchical browsing data based on the DC
# identifier.
sub add_dc {
    my($file) = @_;
    my $xml = XML::LibXML->load_xml(location => $file);
    my $contributor = 'oop';
    my $collection = 'oop';

    my $mets = XML::LibXML::XPathContext->new($xml->documentElement());
    $mets->registerNs('mets', 'http://www.loc.gov/METS/');
    $mets->registerNs('dc', 'http://canadiana.ca/schema/2012/xsd/cmr');

    my $doc_id = $mets->findvalue('/mets:mets/@OBJID');

    $c->model('DB::DocumentCollection')->update_or_create(contributor => $contributor, id => $doc_id, collection => $collection);

    foreach my $dc ($mets->findnodes('/mets:mets/mets:dmdSec/mets:mdWrap[@MDTYPE="DC"]/mets:xmlData')) {
        my $identifier = $dc->findvalue('simpledc/dc:identifier');
        my($chamber, $parliament, $session) = split(/-/, $identifier);

        my $p_no = substr($parliament, 1);
        my $s_no = substr($session, 1);
        my $chamber_name;
        my $parliament_name;
        my $session_name;
        if ($chamber eq 'HOC') {
            $chamber_name = "House of Commons";
            $parliament_name = sprintf("Parliament %d", $p_no);
            $session_name = sprintf("Session %d", $s_no);
        }
        elsif ($chamber eq 'CDC') {
            $chamber_name = "Chambre des communes";
            $parliament_name = sprintf("Législature %d", $p_no);
            $session_name = sprintf("Session %d", $s_no);
        }
        elsif ($chamber eq 'SOC') {
            $chamber_name = "Senate of Canada";
            $parliament_name = sprintf("Parliament %d", $p_no);
            $session_name = sprintf("Session %d", $s_no);
        }
        elsif ($chamber eq 'SDC') {
            $chamber_name = "Sénat du Canada";
            $parliament_name = sprintf("Législature %d", $p_no);
            $session_name = sprintf("Session %d", $s_no);
        }

        # Establish all three terms, if they don't exist.
        my $thesaurus_id;
        $thesaurus_id = $c->model('DB::Thesaurus')->add_term($chamber_name, $chamber);
        $c->model('DB::DocumentThesaurus')->find_or_create({contributor => $contributor, id => $doc_id, thesaurus_id => $thesaurus_id});
        $thesaurus_id = $c->model('DB::Thesaurus')->add_term($parliament_name, $chamber, $parliament);
        $c->model('DB::DocumentThesaurus')->find_or_create({contributor => $contributor, id => $doc_id, thesaurus_id => $thesaurus_id});
        $thesaurus_id = $c->model('DB::Thesaurus')->add_term($session_name, $chamber, $parliament, $session);
        $c->model('DB::DocumentThesaurus')->find_or_create({contributor => $contributor, id => $doc_id, thesaurus_id => $thesaurus_id});

    }
}

# Add subject headings as needed from the MARCXML in the METS record and
# add the document as part of those headings.
sub add_marc {
    my($file) = @_;
    my $xml = XML::LibXML->load_xml(location => $file);
    my $contributor = 'ooe';
    my $collection = 'dfait';

    my $mets = XML::LibXML::XPathContext->new($xml->documentElement());
    $mets->registerNs('mets', 'http://www.loc.gov/METS/');
    $mets->registerNs('marc', 'http://www.loc.gov/MARC21/slim');

    my $doc_id = $mets->findvalue('/mets:mets/@OBJID');

    $c->model('DB::DocumentCollection')->update_or_create(contributor => $contributor, id => $doc_id, collection => $collection);

    foreach my $marc ($mets->findnodes('/mets:mets/mets:dmdSec/mets:mdWrap[@MDTYPE="MARC"]/mets:xmlData')) {

        foreach my $field (qw(600 610 611 630 648 650 651 653 654 655 656 657 658 662)) {
            foreach my $subject ($mets->findnodes("descendant::marc:datafield[\@tag='$field']", $marc)) {
                my @path = ();;

                # Establish the root term, if it does not yet exist. A '9'
                # in indicator 2 might be an old UTLAS indicator for RVM.
                # Assume anything not 6 or 9 is a 0 or 5, which we will
                # treat both as LCSH.
                if ($subject->getAttribute('ind2') eq '6' || $subject->getAttribute('ind2' eq '9')) {
                    push(@path, 'RVM');
                    my $id = $c->model('DB::Thesaurus')->add_term('Répertoire de vedettes-matière', @path);
                    $c->model('DB::DocumentThesaurus')->find_or_create({contributor => $contributor, id => $doc_id, thesaurus_id => $id});
                }
                else {
                    push(@path, 'LCSH');
                    my $id = $c->model('DB::Thesaurus')->add_term('Library of Congress Subject Headings', @path);
                    $c->model('DB::DocumentThesaurus')->find_or_create({contributor => $contributor, id => $doc_id, thesaurus_id => $id});
                }

                # Add all sub-terms
                foreach my $subfield ($mets->findnodes("marc:subfield", $subject)) {
                    my $label = $subfield->findvalue('.');

                    # Create and normalize the term
                    my $term  = $label;
                    $term =~ s/\s+/ /g;
                    $term = uc($term);
                    $term =~ s/[^A-Z ]//g;
                    # TODO: more, including changing accented characters to
                    # base characters.

                    push(@path, $term);
                    my $id = $c->model('DB::Thesaurus')->add_term($label, @path);
                    $c->model('DB::DocumentThesaurus')->find_or_create({contributor => $contributor, id => $doc_id, thesaurus_id => $id});
                }
            }
        }
    }
}
