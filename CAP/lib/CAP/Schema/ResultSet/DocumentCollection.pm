package CAP::Schema::ResultSet::DocumentCollection;

use strict;
use warnings;
use base 'DBIx::Class::ResultSet';
use JSON;


# Export the named collections, or all collections if @_ is empty, as a
# JSON object.
sub export_collections {
    my($self, @collections) = @_;
    my $export = [];

    if (@collections) {
        foreach my $collection (@collections) {
            my $set = $self->search({ collection => $collection });
            while (my $doc = $set->next) {
                push(@{$export}, [ $doc->contributor, $doc->id, $doc->collection ]);
            }
        }
    }
    else {
       foreach my $doc ($self->all) {
            push(@{$export}, [ $doc->contributor, $doc->id, $doc->collection ]);
        }
    }
    return encode_json($export);
}


# Import collection data based on the serialized JSON format generated by
# export_collections
sub import_collections {
    my($self, $json) = @_;
    my $collections = decode_json($json);
    foreach my $doc (@{$collections}) {
        $self->update_or_create({ contributor => $doc->[0], id => $doc->[1], collection => $doc->[2]});
    }
    return 1;
}


# List all of the collections in the database.
sub list_collections {
    my($self) = @_;
    my @collections = ();
    my $result = $self->search({}, { columns =>  [ 'collection' ], distinct => 1 });
    while (my $row = $result->next) {
        push(@collections, $row->collection);
    }
    return @collections;
}


# Add a set of documents defined by @identifiers belonging to $contributor
# to $collection. Reurn a count of the number of items actually added.
sub add_documents {
    my($self, $collection, $contributor, @identifiers) = @_;
    my $count = 0;
    foreach my $id (@identifiers) {
        $id =~ s/\s*//g; # Remove any whitespace in or around the identifier (e.g. CRs from DOS files)
        next unless ($id); # Ignore null identifiers
        eval {
            $self->update_or_create({ contributor => $contributor, id => $id, collection => $collection });
        };
        ++$count unless ($@);
    }
    return $count;
}

1;

