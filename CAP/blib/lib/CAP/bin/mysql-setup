#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use File::Basename;
use Getopt::Long;

my $version = 0.20110527;
my $prog    = basename($0);

my $do_install = undef;
my $do_uninstall = undef;
my $cap_password = "";

my $usage = "Usage: $prog -[un]install [-password=CAP_USER_PASSWORD]\n";

GetOptions(install => \$do_install, uninstall => \$do_uninstall, 'password=s' => \$cap_password) or die($usage);

my @install = (
    'CREATE DATABASE IF NOT EXISTS cap DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci',

    # Primary user account table
    'CREATE TABLE IF NOT EXISTS cap.user (' .
    '   id        INT PRIMARY KEY AUTO_INCREMENT,' .
    '   username  VARCHAR(128) UNIQUE NOT NULL,' .
    '   password  VARCHAR(50) NOT NULL,' .
    '   name      VARCHAR(128),' .
    '   token     VARCHAR(128),' .
    '   confirmed INT NOT NULL DEFAULT 0,' .
    '   active    INT NOT NULL DEFAULT 1,' .
    '   admin     INT NOT NULL DEFAULT 0,' .
    '   lastseen  INT NOT NULL,' .
    '   INDEX(token)' .
    ') ENGINE=INNODB',

    # Primary subscriber groups table
    'CREATE TABLE IF NOT EXISTS cap.groups (' .
    '  id INT PRIMARY KEY AUTO_INCREMENT,' .
    '  name VARCHAR(128) NOT NULL UNIQUE' .
    ') ENGINE=INNODB',

    # Active sessions table
    'CREATE TABLE IF NOT EXISTS cap.sessions (' .
    '   id CHAR(72) PRIMARY KEY,' .
    '   session_data TEXT,' .
    '   expires INT(10)' .
    ') ENGINE=INNODB',

    # User membership in a group
    'CREATE TABLE IF NOT EXISTS cap.user_groups (' .
    '  user_id INT NOT NULL, ' .
    '    FOREIGN KEY(user_id) REFERENCES cap.user(id) ON DELETE CASCADE, ' .
    '  group_id INT NOT NULL, ' .
    '    FOREIGN KEY(group_id) REFERENCES cap.groups(id) ON DELETE CASCADE, ' .
    '  joined DATETIME, ' .
    '  expires DATETIME, ' .
    '  PRIMARY KEY(user_id, group_id)' .
    ') ENGINE=INNODB',

    # Assign IP address blocks to subscriber groups
    'CREATE TABLE IF NOT EXISTS cap.groups_ipaddr (' .
    '  cidr VARCHAR(64) PRIMARY KEY, ' .
    '  group_id INT NOT NULL, ' .
    '    FOREIGN KEY(group_id) REFERENCES cap.groups(id) ON DELETE CASCADE, ' .
    '  start BIGINT UNSIGNED NOT NULL, ' .
    '    INDEX(start), ' .
    '  end BIGINT UNSIGNED NOT NULL, ' .
    '    INDEX(end)' .
    ') ENGINE=INNODB',

    # Collections
    'CREATE TABLE IF NOT EXISTS cap.collection (' .
    '  id VARCHAR(16) PRIMARY KEY ' .
    # TODO: add pricing, etc.
    ') ENGINE=INNODB',

    # Subscriber group collection list
    'CREATE TABLE IF NOT EXISTS cap.groups_collection (' .
    '  collection_id VARCHAR(16) NOT NULL, ' .
    '    FOREIGN KEY(collection_id) REFERENCES cap.collection(id) ON DELETE CASCADE ON UPDATE CASCADE, ' .
    '  group_id INT NOT NULL, ' .
    '    FOREIGN KEY(group_id) REFERENCES cap.groups(id) ON DELETE CASCADE ON UPDATE CASCADE, ' .
    '  joined DATETIME, ' .
    '  expires DATETIME, ' .
    '  PRIMARY KEY(collection_id, group_id)' .
    ') ENGINE=INNODB',

    # Individual user collection list
    'CREATE TABLE IF NOT EXISTS cap.user_collection (' .
    '  collection_id VARCHAR(16) NOT NULL, ' .
    '    FOREIGN KEY(collection_id) REFERENCES cap.collection(id) ON DELETE CASCADE ON UPDATE CASCADE, ' .
    '  user_id INT NOT NULL, ' .
    '    FOREIGN KEY(user_id) REFERENCES cap.user(id) ON DELETE CASCADE ON UPDATE CASCADE, ' .
    '  joined DATETIME, ' .
    '  expires DATETIME, ' .
    '  PRIMARY KEY(collection_id, user_id)' .
    ') ENGINE=INNODB',

    # User document list
    'CREATE TABLE IF NOT EXISTS cap.user_document (' .
    '  user_id INT NOT NULL, ' .
    '    FOREIGN KEY(user_id) REFERENCES cap.user(id) ON DELETE CASCADE, ' .
    '  document VARCHAR(160) NOT NULL, ' .
    '  acquired DATETIME, ' .
    '  PRIMARY KEY(user_id, document)' .
    ') ENGINE=INNODB',

    # Code to text label mappings for language, media type, etc.
    'CREATE TABLE IF NOT EXISTS cap.labels (' .
    '  field VARCHAR(32),' .
    '  code VARCHAR(32),' .
    '  lang VARCHAR(2),' .
    '  label VARCHAR(128),' .
    '  PRIMARY KEY(field, code, lang)' .
    ') ENGINE=MYIASM',

    # Main request log
    'CREATE TABLE IF NOT EXISTS cap.request_log (' .
    '  id INT PRIMARY KEY AUTO_INCREMENT,' .
    '  time DATETIME NOT NULL,' .
    '  session VARCHAR(40) NOT NULL,' .
    '  session_count INT NOT NULL,' .
    '  portal VARCHAR(64) NOT NULL,' .
    '  view VARCHAR(64) NOT NULL,' .
    '  action VARCHAR(64) NOT NULL,' .
    '  status INT NOT NULL' .
    ') ENGINE=INNODB',

    # Search request log
    'CREATE TABLE IF NOT EXISTS cap.search_log (' .
    ' id INT PRIMARY KEY AUTO_INCREMENT, ' .
    ' request_id INT NOT NULL, ' .
    '   INDEX(request_id),' .
    '   FOREIGN KEY(request_id) REFERENCES cap.request_log(id) ON DELETE CASCADE, ' .
    ' query VARCHAR(256), ' .
    ' results INT NOT NULL' .
    ') ENGINE=INNODB',

    # Possible bookmark table (sample)
    #'CREATE TABLE IF NOT EXISTS cap.bookmark (' .
    #'  id INT UNIQUE AUTO_INCREMENT, ' .
    #'  user_id INT NOT NULL, ' .
    #'    INDEX(user_id), ' .
    #'    FOREIGN KEY(user_id) REFERENCES user(id),' .
    #'  page_id VARCHAR(128) NOT NULL, ' .
    #'    INDEX(page_id), ' .
    #'  doc_id VARCHAR(128) NOT NULL, ' .
    #'    INDEX(doc_id), ' .
    #'  seq INT, ' .
    #'  timestamp DATETIME NOT NULL, ' .
    #'  note TEXT, ' .
    #'  PRIMARY KEY(user_id, page_id) ' .
    #')',

    "CREATE USER 'cap'\@'localhost' IDENTIFIED BY '$cap_password'",

    "GRANT SELECT, INSERT, UPDATE, DELETE ON cap.* to 'cap'\@'localhost'",
);

my @uninstall = (
    "DROP USER 'cap'\@'localhost'",

    'DROP DATABASE cap',
);

if ($do_install) {
    my $dbh = db_connect();
    foreach my $sql (@install) {
        $dbh->do($sql) or die("SQL statement failed. Reason: " . $dbh->errstr . ". SQL:\n$sql\n");
    }
}
elsif ($do_uninstall) {
    print("WARNING: this will completely remove the cap database and user from the system. Are you sure you want to do this? [y/N]: ");
    chomp(my $confirm = <STDIN>);
    unless ($confirm =~ /^y(es)?$/i) {
        die("Aborting.\n");
    }
    my $dbh = db_connect();
    foreach my $sql (@uninstall) {
        $dbh->do($sql) or die("SQL statement failed. Reason: " . $dbh->errstr . ". SQL:\n$sql\n");
    }
}
else {
    die($usage);
}

sub db_connect
{
    print("Database administrator name: ");
    chomp(my $username = <STDIN>);
    print("Database administrator password: ");
    chomp(my $password = <STDIN>);

    my $dbh = DBI->connect('DBI:mysql:', $username, $password) or die("Failed to connect to database: " . DBI->errstr . "\n");
    return $dbh;
}

=head1 NAME

mysql-setup - install/uninstall script for the CAP MySQL database

=head1 SYNOPSIS

mysql-setup -[un]install  [-password=I<CAP_USER_PASSWORD>]

=head1 DESCRIPTION

Installs or uninstalls the cap MySQL database and creates the database
user I<cap>. If you specify the C<-password> option, the I<cap> user will
be given the selected password. Otherwise, no password will be set.

You will be prompted for a database administrator username and password
before connecting to the database. The C<-install> option does not
overwrite existing tables, so if you want to make sure that the database
structure is completely up to date, run C<-uninstall> first. Note that
C<-uninstall> completely wipes out both the database and the I<cap>
database user, so make sure this is really what you want before using this
option.

=head1 BUGS

If the I<cap> user already exists, C<-install> will die with an error
because it cannot create the user. You will still probably have a working
system, but the outcome is unclear.

Any sort of database failure may leave you with a
half-installed/uninstalled database. If this happens, it is best to run
C<-uninstall> before trying again.

The password prompt echoes the password on-screen. This needs to be fixed
so that the password is not echoed.

=cut
