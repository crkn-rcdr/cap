.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CAP::Solr 3"
.TH CAP::Solr 3 "2010-01-27" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CAP::Solr;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Solr interface for \s-1CAP\s0.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.IP "use CAP::Solr;" 4
.IX Item "use CAP::Solr;"
.PD 0
.IP "" 4
.ie n .IP "$config\->{select_uri} = ""http://localhost:89893/solr/select""; # Where to find Solr." 4
.el .IP "\f(CW$config\fR\->{select_uri} = ``http://localhost:89893/solr/select''; # Where to find Solr." 4
.IX Item "$config->{select_uri} = http://localhost:89893/solr/select; # Where to find Solr."
.ie n .IP "$config\->{defaults}\->{rows => 10, version => ""2.2"", ...};" 4
.el .IP "\f(CW$config\fR\->{defaults}\->{rows => 10, version => ``2.2'', ...};" 4
.IX Item "$config->{defaults}->{rows => 10, version => 2.2, ...};"
.ie n .IP "$config\->{subset}\->{gkey => ""my_collection_name""};" 4
.el .IP "\f(CW$config\fR\->{subset}\->{gkey => ``my_collection_name''};" 4
.IX Item "$config->{subset}->{gkey => my_collection_name};"
.ie n .IP "$config\->{text} = [""text_en"", ""text_fr"", ""text""];" 4
.el .IP "\f(CW$config\fR\->{text} = [``text_en'', ``text_fr'', ``text''];" 4
.IX Item "$config->{text} = [text_en, text_fr, text];"
.ie n .IP "$solr = CAP::Solr\->new($config);" 4
.el .IP "\f(CW$solr\fR = CAP::Solr\->new($config);" 4
.IX Item "$solr = CAP::Solr->new($config);"
.IP "" 4
.ie n .IP "$hits\fR = \f(CW$solr\fR\->count({$field => \f(CW$value, ...});" 4
.el .IP "\f(CW$hits\fR = \f(CW$solr\fR\->count({$field => \f(CW$value\fR, ...});" 4
.IX Item "$hits = $solr->count({$field => $value, ...});"
.ie n .IP "$result\fR = \f(CW$solr\fR\->query($start, {$field => \f(CW$value\fR, ...}, {$param => \f(CW$value, ...});" 4
.el .IP "\f(CW$result\fR = \f(CW$solr\fR\->query($start, {$field => \f(CW$value\fR, ...}, {$param => \f(CW$value\fR, ...});" 4
.IX Item "$result = $solr->query($start, {$field => $value, ...}, {$param => $value, ...});"
.ie n .IP "$result\fR = \f(CW$solr\fR\->query_grouped($start, {$field => \f(CW$value\fR, ...}, {$param => \f(CW$value, ...});" 4
.el .IP "\f(CW$result\fR = \f(CW$solr\fR\->query_grouped($start, {$field => \f(CW$value\fR, ...}, {$param => \f(CW$value\fR, ...});" 4
.IX Item "$result = $solr->query_grouped($start, {$field => $value, ...}, {$param => $value, ...});"
.ie n .IP "$doc\fR = \f(CW$solr\->document($key);" 4
.el .IP "\f(CW$doc\fR = \f(CW$solr\fR\->document($key);" 4
.IX Item "$doc = $solr->document($key);"
.ie n .IP "$doc\fR = \f(CW$solr\->next_doc($doc);" 4
.el .IP "\f(CW$doc\fR = \f(CW$solr\fR\->next_doc($doc);" 4
.IX Item "$doc = $solr->next_doc($doc);"
.ie n .IP "$doc\fR = \f(CW$solr\->prev_doc($doc);" 4
.el .IP "\f(CW$doc\fR = \f(CW$solr\fR\->prev_doc($doc);" 4
.IX Item "$doc = $solr->prev_doc($doc);"
.IP "" 4
.ie n .IP "$xml\fR = \f(CW$solr\->update($xml_string);" 4
.el .IP "\f(CW$xml\fR = \f(CW$solr\fR\->update($xml_string);" 4
.IX Item "$xml = $solr->update($xml_string);"
.PD
.SH "METHODS"
.IX Header "METHODS"
.IP "new($config)" 4
.IX Item "new($config)"
Create a new Solr interface.
.IP "count($query)" 4
.IX Item "count($query)"
Returns a simple count of the number of hits for \f(CW$query\fR
.ie n .IP "query($start, $query\fR, \f(CW$param)" 4
.el .IP "query($start, \f(CW$query\fR, \f(CW$param\fR)" 4
.IX Item "query($start, $query, $param)"
Runs a search for \f(CW$query\fR. \f(CW$param\fR includes other parameters which override the defaults. Returns a result object.
.Sp
A query is a set of \f(CW$field\fR => \f(CW$value\fR pairs. If \f(CW$field\fR begins with an
underscore, it searches \f(CW$field\fR without escaping value. E.g.: text => \*(L"foo
\&\s-1OR\s0 bar\*(R" becomes text => \*(L"foo or bar\*(R" while _text => \*(L"foo \s-1OR\s0 \s-1BAR\s0\*(R" becomes
text => \*(L"foo \s-1OR\s0 bar\*(R".
.ie n .IP "query_grouped($start, $query\fR, \f(CW$param)" 4
.el .IP "query_grouped($start, \f(CW$query\fR, \f(CW$param\fR)" 4
.IX Item "query_grouped($start, $query, $param)"
Runs a query, but facets based on container (pkey) and returns a
constructed result object consisting of the containers themselves. Each
container document will have an additional field {hits} indicating the
number of matching child objects.
.IP "document($key)" 4
.IX Item "document($key)"
Returns the document identified by \f(CW$key\fR.
.IP "next_doc($doc)" 4
.IX Item "next_doc($doc)"
Returns the next-highest sequence sibling document.
.IP "prev_doc($doc)" 4
.IX Item "prev_doc($doc)"
Returns the next-lowest sequence sibling document.
.IP "update($xml)" 4
.IX Item "update($xml)"
Sends an update request to the Solr index, sending it the text string \f(CW$xml\fR as its request.
.ie n .Sh "$doc\fP = \f(CW$solr\fP\->query_first($query, \f(CW$param);"
.el .Sh "\f(CW$doc\fP = \f(CW$solr\fP\->query_first($query, \f(CW$param\fP);"
.IX Subsection "$doc = $solr->query_first($query, $param);"
.Vb 1
\&    A more convenient way of saying C<$doc = $solr\->query(0, $query, $param)\->{documents}\->[0]>
.Ve
.ie n .IP "prev_doc ( \fI\fI$doc\fI\fR )" 4
.el .IP "prev_doc ( \fI\f(CI$doc\fI\fR )" 4
.IX Item "prev_doc ( $doc )"
Returns the document previous in sequence (the document with the next
lowest \fIseq\fR value) to \fI\f(CI$doc\fI\fR, or undef if no such document exists.
.ie n .IP "ancestors ( \fI\fI$document\fI\fR )" 4
.el .IP "ancestors ( \fI\f(CI$document\fI\fR )" 4
.IX Item "ancestors ( $document )"
Returns an arrayref of documents consisting of all the
ancestor documents for the supplied document, starting with the
oldest ancestor and ending with the immediate parent. Returns an empty
array if \f(CW$document\fR is not a valid document or if no acnestors exist.
.ie n .Sh "$children\fP = \f(CW$solr\->children($document, [$type])"
.el .Sh "\f(CW$children\fP = \f(CW$solr\fP\->children($document, [$type])"
.IX Subsection "$children = $solr->children($document, [$type])"
.Vb 3
\&    Returns an arrayref of all the child records of $document. If $type is
\&    supplied, only records of that type are returned. Records are returned
\&    sorted according to their seq field.
\&
\&    Note that, if there are a lot of child records, this call can take a
\&    long time to complete.
.Ve
