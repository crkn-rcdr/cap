.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CAP_DEBUG::Catalyst::Plugin::I18N::DBIC 3"
.TH CAP_DEBUG::Catalyst::Plugin::I18N::DBIC 3 "2010-01-27" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Plugin::I18N::DBIC \- Internationalization for Catalyst, data loaded
from database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Catalyst qw(\-Debug I18N::DBIC);
\&
\&  _\|_PACKAGE_\|_\->config(
\&      name => \*(AqMyApp\*(Aq,
\&      \*(AqI18N::DBIC\*(Aq    => {
\&          lexicon_model   => \*(AqDBIC::MyLexicon\*(Aq,
\&      },
\&  );
.Ve
.PP
You can load the lexicon in your controller.
.PP
.Vb 3
\&  $c\->languages( [\*(Aqde\*(Aq] );
\&  $c\->load_lexicon( qw(footer header user/list navigation) );
\&  print $c\->localize(\*(AqHello Catalyst\*(Aq);
.Ve
.PP
Or in your template
.PP
.Vb 1
\&  [% c.load_lexicon(\*(Aqheader\*(Aq, \*(Aqnavigation\*(Aq) %]
\&
\&  [% c.loc(\*(AqHome Page\*(Aq) %]
\&  [% c.loc(\*(AqWelcome to Catalyst\*(Aq) %]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is based on Catalyst::Plugin::I18N and I18N and you should
refer to those modules for further information.
.PP
These modules hold their localization data in files (mo, po or pm files) and
for a very large application these files can become very large and difficult
to maintain.
.PP
Catalyst::Plugin::I18N::DBIC however allows you to hold the localization
data in a database (using Catalyst::Model::DBIC::Schema ) which has
several advantages.
.IP "\(bu" 4
The localization data can be split into several 'paths' which represent the
natural organization of the application. e.g. 'footer', 'header', 'navigation',
\&'user/list'.
.IP "\(bu" 4
You can write an application that directly modifies the database so that
your translators can do their stuff more easily and directly.
.IP "\(bu" 4
If you have a client that requires custom text it is easier to do this by
making a database change than by releasing a new text file.
.SH "EXTENDED METHODS"
.IX Header "EXTENDED METHODS"
.Sh "load_lexicon"
.IX Subsection "load_lexicon"
Takes an array of 'paths' which should be searched to load the Lexicon data
from the database.
.PP
It is more efficient in database requests to request all paths that may be
used on a page in one go. It may however be more convenient to make several
requests if you include templates in other templates (such as header and
footer templates) and make separate calls in each template.
.SH "Database Schema"
.IX Header "Database Schema"
The module requires a table called \f(CW\*(C`lexicon\*(C'\fR with the following structure
.PP
.Vb 9
\&  CREATE TABLE lexicon (
\&    id          int(11) NOT NULL auto_increment,
\&    language    varchar(15)     default NULL,
\&    path        varchar(255)    default NULL,
\&    message     text,
\&    value       text,
\&    notes       text,
\&    PRIMARY KEY (id)
\&  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
.Ve
.PP
By default the table \f(CW\*(C`lexicon\*(C'\fR is used if you don't specify the
lexicon_model in the config. If you use an alternative table you must still
use the same structure.
.PP
Actually you may want to change the index method and the 'notes' field is not
required but can be useful to hold information to help the translator put the
message in context.
.PP
The \f(CW\*(C`value\*(C'\fR is the tranlated \f(CW\*(C`message\*(C'\fR. The \f(CW\*(C`path\*(C'\fR is the context where
the message is used. For example you may wish to group all the menu button
text and navigation text into the \f(CW\*(C`navigation\*(C'\fR path. All the text for the
generic header template could be in the \f(CW\*(C`header\*(C'\fR path etc.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Refer to Catalyst::Plugin::I18N for information on the other methods used.
.SH "TO-DO"
.IX Header "TO-DO"
.IP "Implement caching methods on-demand or pre-load =item Reduce name clashes for text by making use of the path data" 4
.IX Item "Implement caching methods on-demand or pre-load =item Reduce name clashes for text by making use of the path data"
.SH "AUTHOR"
.IX Header "AUTHOR"
Ian Docherty, \f(CW\*(C`cpan@iandocherty.com\*(C'\fR
.PP
With thanks to Kazuma Shiraiwa, Brian Cassidy and others for feedback and advice.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
.Vb 3
\&        Copyright (c) 2005 the aforementioned authors. All rights
\&        reserved. This program is free software; you can redistribute
\&        it and/or modify it under the same terms as Perl itself.
.Ve
