.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CAP::Controller::Root 3"
.TH CAP::Controller::Root 3 "2010-01-28" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CAP::Controller::Root \- main controller for the Canadiana Access Portal
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This controller handles the main dispatch logic as well as error handling
and some auxiliary functions. Other functions are delegated to secondary
controllers, which include:
.IP "CAP::Controller::Auth" 4
.IX Item "CAP::Controller::Auth"
.Vb 1
\&    Authorization, login, and logout functions.
.Ve
.IP "CAP::Controller::Content" 4
.IX Item "CAP::Controller::Content"
.Vb 1
\&    Content ingestion, indexing, and management of metadata and digital resources (administrative).
.Ve
.IP "CAP::Controller::File" 4
.IX Item "CAP::Controller::File"
.Vb 2
\&    Methods for responding to digital content (image files, etc.) requests
\&    by finding, generating, and delivering appropriate files.
.Ve
.IP "CAP::Controller::Search" 4
.IX Item "CAP::Controller::Search"
.Vb 1
\&    Portal search functions.
.Ve
.IP "CAP::Controller::Show" 4
.IX Item "CAP::Controller::Show"
.Vb 1
\&    Methods for delivering/displaying content and/or records to the user.
.Ve
.IP "CAP::Controller::User" 4
.IX Item "CAP::Controller::User"
.Vb 1
\&    User and role management features (administrative).
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "Actions"
.IX Subsection "Actions"
.ie n .IP "page ( \fI\fI@path\fI\fR )" 4
.el .IP "page ( \fI\f(CI@path\fI\fR )" 4
.IX Item "page ( @path )"
Returns an \s-1HTML\s0 page, which is processed using the standard wrapper and
\&\fIpage.tt\fR template. \fI\f(CI@path\fI\fR describes the path to the file, which is in
the \fIpages\fR subdirectory of the portal root, and which is further
subdivided according to the interface. The '.html' suffix is added to the
file automatically. E.g., a request for \fI/foo/en/page/bar/baz\fR would
retrieve the file \fI\f(CI$root\fI/foo/pages/en/bar/baz.html\fR.
.Sp
This method is intended to be used to present larger textual documents
that still should be wrapped in the usual template. Note that if you have
multiple language interfaces, you need a separate document for each one.
.IP "index" 4
.IX Item "index"
Displays the home page for a valid portal with a valid interface (e.g. \fI/foo/en\fR).
.IP "master_index" 4
.IX Item "master_index"
Display the master portal home page. This method is called in response to an empty request (\fI/\fR).
.IP "post" 4
.IX Item "post"
Takes a \s-1POST\s0 request (e.g. from a Web form) and redirects the request to
an appropriately-constructed \s-1URI\s0. The parameters should be named \fI0\fR,
\&\fI1\fR, \fI2\fR, etc. and will be processed in numerical order. An example form
might look like this:
.Sp
.Vb 8
\&    <form method="post" action="[% c.uri_for(root, \*(Aqpost\*(Aq) %]>
\&      <input type="hidden" name="0" value="[% c.uri_for(root, \*(Aqshow\*(Aq) %]"/>
\&      <select name="1">
\&          <option value="foo:12345">Document 12345</option>
\&          <option value="foo:98765">Document 98765</option>
\&      </select>
\&      <button type="submit">Go</button>
\&    <form>
.Ve
.Sp
In this case, if the second option were selected, the request would be
redirected to \fI\f(CI$root\fI/show/foo:98765\fR.
.IP "splash" 4
.IX Item "splash"
Displays the portal splash page when a request names a portal but nothing else (no interface). E.g.: \fI/foo\fR.
.ie n .IP "static ( \fI\fI@path\fI\fR )" 4
.el .IP "static ( \fI\f(CI@path\fI\fR )" 4
.IX Item "static ( @path )"
Retrieve a static document described in \fI\f(CI@path\fI\fR from the portal's static
directory. E.g.: \fI/foo/en/static/css/foo.css\fR would try to serve the
static file in \fI\f(CI$root\fI/foo/static/css/foo.css\fR.
.Sp
Often, you will want to configure your web server to intercept these URLs
and serve the content directly.
.ie n .IP "test_error ( \fI\fI$error\fI\fR )" 4
.el .IP "test_error ( \fI\f(CI$error\fI\fR )" 4
.IX Item "test_error ( $error )"
Generates an error page for the status code \fI\f(CI$error\fI\fR, with a test error
message. E.g.: \fI/foo/xml/error/500\fR. Only works if \fIdebug\fR is set in
\&\fIcap.conf\fR. Otherwise, a 404 error is generated. This method can be used for
simulating responses to various error conditions without actually
having to create the error condition itself.
.Sh "Flow Control"
.IX Subsection "Flow Control"
.IP "access_denied" 4
.IX Item "access_denied"
Detach to this method when access to the resource should be
denied due to not being logged in or insufficient user privileges.
.IP "auto" 4
.IX Item "auto"
Executed at the start of each request.
.IP "base" 4
.IX Item "base"
This is the base for (almost) all chained dispatches. It takes two
arguments: the name of the portal and the interface. The portal name must
be one recognized in the config file. The interface can either be an
iface directive in the portal configuration, or any two-letter code. In
the former case, the view will be rendered using the templates in the
\&\f(CW$iface\fR subdirectory (e.g. requests for \fIfoo/xml/*\fR will render using
the templates in \fI\f(CI$root\fI/foo/templates/xml\fR). In the latter case, \f(CW$iface\fR
will be treated as a language code, which will use any i18n resources for
that language, and the Main templates will be used (e.g. requests for
\&\fI/foo/en/*\fR will render using the templates in \fI\f(CI$root\fI/foo/templates/Main\fR.
.Sp
A request for \fI/$portal/static/*\fR is a special case: it will be
redirected to \fI/$portal/$default/static/*\fR, where \fI\f(CI$default\fI\fR is the
default interface for the portal. This is a bit of a hack so that
requests for static resources from the splash page can be made.
.IP "config_portal" 4
.IX Item "config_portal"
Called from \fIbase\fR and some of the default actions to set various
configuration parameters based on the requested portal.
.IP "default" 4
.IX Item "default"
Called if no other actions match the request. The default action is to
forward to \fIerror\fR with a 404 (Not Found) code.
.IP "default2" 4
.IX Item "default2"
Called when a valid portal and interface are successfully configured (see
\&\fIbase\fR) but the action itself is invalid. E.g.:
\&\fI/foo/en/slay/grue\fR. Forwards to \fIerror\fR with a 404.
.IP "end" 4
.IX Item "end"
This is the end action for all methods in all controllers. It sets a
default template if one was not explicitly set already, and updates the
template path based on the interface.
.ie n .IP "error ( \fI\fI$error\fI\fR [, \fI\f(CI$error_message\fI\fR] )" 4
.el .IP "error ( \fI\f(CI$error\fI\fR [, \fI\f(CI$error_message\fI\fR] )" 4
.IX Item "error ( $error [, $error_message] )"
Detach to this method when an error occurs that should stop normal
processing. Put the \s-1HTTP\s0 status code to be returned in \fI\f(CI$error\fI\fR and,
optionally, a descriptive message in \fI\f(CI$error_message\fI\fR.
.IP "set_root" 4
.IX Item "set_root"
Sets the value of \fI\f(CI$c\fI\->stash\->{root}\fR and \fI\f(CI$c\fI\->stash\->{uri}\fR based on
the particulars of the request. All URIs in the template should use the
root as the first part of any internal URIs they construct, while uri is a
self-referential \s-1URI\s0 that points to the page itself, for use with some of
the authentication routines and other functions that may intercept and
temporarily redirect a request. (In order to allow the request to
eventually be forwarded to the original \s-1URI\s0.)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
See \fICAP/license.txt\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
William Wueppelmann <william.wueppelmann@canadiana.ca>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cap.conf, \s-1CAP\s0
