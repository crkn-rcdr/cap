.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BagIt 3"
.TH BagIt 3 "2009-11-30" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BagIt \- module for manipulating BagIt archives
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use BagIt;
\&    my $bagit = BagIt\->new($root);
\&    $bagit\->load($tarfile);
\&
\&    foreach my $archive_file ($bagit\->list()) {
\&        $bagit\->extract($archive_file, $file_on_disk);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Library routines to create and read BagIt directories.
.PP
This library is still in development. Many methods are undocumented and
all are are subject to change without notice. The \s-1API\s0 is not yet frozen.
.SH "METHODS"
.IX Header "METHODS"
.Sh "BagIt\->new([$root])"
.IX Subsection "BagIt->new([$root])"
Creates a new, empty BagIt object. The \f(CW$root\fR argument specifies the name of the
BagIt directory root, and will also be used as the basename of the BagIt
tarfile itself. If no name is specified, \*(L"bagit\*(R" is used.
.ie n .Sh "$bagit\->load($tarfile)"
.el .Sh "\f(CW$bagit\fP\->load($tarfile)"
.IX Subsection "$bagit->load($tarfile)"
Loads an existing BagIt archive from a possibly compressed tar archive
file. Returns 1 if the file is successfully loaded and validated;
otherwise, returns 0. This overwrites any existing data in the BagIt
archive, including the archive root.
.ie n .Sh "$bagit\fP\->\fIlist()"
.el .Sh "\f(CW$bagit\fP\->\fIlist()\fP"
.IX Subsection "$bagit->list()"
Returns an array of all of the files in the BagIt archive.
.ie n .Sh "$bagit\fP\->extract($archive_file, \f(CW$file_on_disk)"
.el .Sh "\f(CW$bagit\fP\->extract($archive_file, \f(CW$file_on_disk\fP)"
.IX Subsection "$bagit->extract($archive_file, $file_on_disk)"
Copies a file from the archive to the specified location on disk.
.ie n .Sh "$bagit\fP\->add_file($file, \f(CW$alias)"
.el .Sh "\f(CW$bagit\fP\->add_file($file, \f(CW$alias\fP)"
.IX Subsection "$bagit->add_file($file, $alias)"
Adds \f(CW$file\fR to the archive's data directory as \f(CW$alias\fR. E.g.
add_file('/foo/bar', 'baz') will add the file /foo/bar as
\&\f(CW$bagit_root\fR/data/baz.
.ie n .Sh "$bagit\fP\->add_files($prefix, \f(CW$root\fP, \f(CW@files)"
.el .Sh "\f(CW$bagit\fP\->add_files($prefix, \f(CW$root\fP, \f(CW@files\fP)"
.IX Subsection "$bagit->add_files($prefix, $root, @files)"
Add \f(CW@files\fR, which are found under \f(CW$root\fR, to the archive under
data/$prefix. E.g. add_files('foo', '/bar', 'baz', 'quz') would add
/bar/baz and /abr/quz to the archive as data/foo/baz and data/foo/quz. If
\&\f(CW@files\fR containes a directory, its contents are recursively added.
.ie n .Sh "$bagit\->write_archive($path)"
.el .Sh "\f(CW$bagit\fP\->write_archive($path)"
.IX Subsection "$bagit->write_archive($path)"
Write the bagit archive to a file under \f(CW$path\fR. The name of the file will
thus be \f(CW$path\fR/$bagit\->{root}.tgz
.SH "AUTHOR"
.IX Header "AUTHOR"
William Wueppelmann <william.wueppelmann@canadiana.ca>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009, Canadiana.org
.PP
This library is free software; you may redistribute and/or modify it under the same terms as Perl itself.
