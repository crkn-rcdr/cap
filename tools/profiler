#!/usr/bin/perl
use strict;
use warnings;
use Encode;
use File::Basename;
use Getopt::Long;
use XML::LibXML;

my $version = 0.20091210;
my %opt = ( dir => "." );
my %profiles = ();
my $xml = XML::LibXML->new();
#my $Profile;

my $usage = "Usage: " . basename($0) . " [-profile=PROFILE_NAME] [-dir=PROFILE_DIR] [-quiet]\n";

GetOptions(
    "-profile=s" => \$opt{profile},
    "-dir=s" => \$opt{dir},
    "-quiet" => \$opt{quiet}
) or die($usage);


if ($opt{profile}) {
    my $file = "$opt{dir}/$opt{profile}.xml";
    die("Cannot locate profile file $file.\n") if (! -f $file);
    print buildProfile($file)->toString(1);
}
else {
    print("Reading metadata profiles:\n") unless ($opt{quiet});
    opendir(PROF, "$opt{dir}") or die("Cannot open profile directory $opt{dir}: $!");
    while (my $file = readdir(PROF)) {
        $file = "$opt{dir}/$file";
        next unless $file =~ /\.xml$/;
        print("  $file ...") unless ($opt{quiet});
        my $profile = buildProfile($file);
        my $name = $profile->findvalue('//profile/@name');
        print(" found profile '$name'\n") unless ($opt{quiet});
        $profiles{$name} = $profile;
    }

    my $errors = 0;

    foreach my $file (@ARGV) {
        my $docno = 0;
        my $metadata;

        if ($file eq '-') {
            open(FILE, "<$file") or die("Cannot open '$file': $!\n");
            $metadata = $xml->parse_fh(*FILE);
            close(FILE);
        }
        else {
            $metadata = $xml->parse_file($file);
        }

        my @docs = $metadata->findnodes('//doc');
        print("Validating file '$file': " . int(@docs) . " documents found.\n") unless ($opt{quiet});

        foreach my $doc (@docs) {
            ++$docno;
            my $ok = 1;
            my $key = $doc->findvalue('field[@name="key"]');
            my $profile = $doc->findvalue('field[@name="type"]');

            # Note that, at this stage, if multiple keys are specified,
            # the first is used. We catch multi-key errors later on.
            if (! $key) {
                print("Document $docno: missing a key\n");
                ++$errors;
                next;
            }

            if (! $profiles{$profile}) {
                print("Document $docno ($key): invalid metadata profile: $profile\n");
                ++$errors;
                next;
            }

            # Check for invalid fields in the source document.
            foreach my $field ($doc->findnodes('field')) {
                my $name = $field->getAttribute("name");
                $name =~ s/_..$//; # Remove language qualifiers from the end of the name
                if (! $profiles{$profile}->findnodes("//field[\@name='$name']")) {

                    # If we didn't find an exact match, see if we can find
                    # a dynamic field match
                    my $dmatch = 0;
                    foreach my $dfield ($profiles{$profile}->findnodes('//dynamicField')) {
                        my $dname = $dfield->getAttribute('name');
                        if (substr($dname, -1, 1) eq '*') {
                            chop($dname);
                            if ($name =~ /^$dname/) {
                                $dmatch = 1;
                                last;
                            }
                        }
                        elsif (substr($dname, 1, 1) eq '*') {
                            $dname = substr($dname, 1);
                            if ($name =~ /$dname$/) {
                                $dmatch = 1;
                                last;
                            }
                        }
                    }
                    next if ($dmatch);
                    
                    print("Document $docno ($key) ($profile): field '$name' is not allowed: " . encode_utf8($field->toString(1)) . "\n");
                    $ok = 0; ++$errors;
                }
            }

            # Check for missing required fields.
            foreach my $field ($profiles{$profile}->findnodes('//field[@required="true"]')) {
                my $name = $field->getAttribute("name");
                if (! $doc->findnodes("field[\@name='$name']")) {
                    print("Document $docno ($key) ($profile): missing required field '$name'\n");
                    $ok = 0; ++$errors;
                }
            }
            
            # Check for multiple instances of non-multivalued fields.
            foreach my $field ($profiles{$profile}->findnodes('//field')) {
                my $multi = $field->getAttribute('multiValued') || "";
                next if ($multi eq 'true');
                my $name = $field->getAttribute("name");
                my @nodes = $doc->findnodes("field[\@name='$name']");
                if (int(@nodes) > 1) {
                    print("Document $docno ($key) ($profile): multiple instances of non-multivalued field '$name':\n");
                    foreach my $node (@nodes) {
                        print("  " . decode_utf8($node->toString(1)) . "\n");
                    }
                    $ok = 0; ++$errors;
                }
            }

            if ($ok) {
                print("Document $docno ($key) ($profile): OK\n") unless ($opt{quiet});
            }

        }
        print ("$errors Errors.\n") unless ($opt{quiet});
    }
    exit(1) if ($errors);
    exit(0);
}

sub buildProfile
{
    my($file) = @_;
    my $main = $xml->parse_file($file);
    my $profile = XML::LibXML::Document->new();
    $profile->setEncoding('utf8');
    $profile->setDocumentElement($main->findnodes("//profile")->[0]->cloneNode());
    parseProfile($main, $profile);
    #print $Profile->toString(1);
    return $profile;
}

sub parseProfile
{
    my($dom, $profile) = @_;
    foreach my $node ($dom->findnodes("//profile/*")) {
        if ($node->nodeName() eq 'include') {
            parseProfile($xml->parse_file($opt{dir} . "/" . $node->getAttribute("file")), $profile);
            next;
        }

        $profile->adoptNode($node);

        # Only the first description found is used.
        if ($node->nodeName eq "desc") {
            if (! $profile->findvalue("//profile/desc")) {
                $profile->documentElement()->appendChild($node);
            }
        }

        # Overwrite any field declarations with any that occur later in
        # the document. This means that the location of <include> elements
        # is important. However, all descriptions are catenated.
        if ($node->nodeName eq "field"|| $node->nodeName eq "dynamicField" ) {
            my $name = $node->getAttribute("name");
            my $field = $profile->findnodes("//profile/" . $node->nodeName . "[\@name='$name']")->[0];
            if ($field) {
                my $text = $field->textContent();
                $node->appendChild($profile->createTextNode($text));
                $field->replaceNode($node);
            }
            else {
                $profile->documentElement()->appendChild($node);
            }
        }
    }
}

__END__

=head1 NAME 

prifiler - utility for validating CAP profiles

=head1 SYNOPSIS

    profiler [-profile=STRING] [-dir=DIRNAME] [-quiet]

=cut
