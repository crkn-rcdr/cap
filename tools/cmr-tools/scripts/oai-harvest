#!/usr/bin/perl
use strict;
use warnings;

use Encode;
use File::Copy;
use File::Path;
use Getopt::Long;
use Net::OAI::Harvester;
use XML::LibXML;

$| = 1;

my $clobber = 1;
my $pause = 5;
my $ignore_comments = 1;
GetOptions(
    'clobber!' => \$clobber,
    'pause=i' => \$pause,
) or die($!);

my $url = shift(@ARGV) or die;
my $cmd = shift(@ARGV) or die;
#my $url = 'http://collections.banq.qc.ca/oai/request';
my $basedir = '.';

my $oai = Net::OAI::Harvester->new( 'baseUrl' => $url );


if ($cmd eq 'list') {
    my $sets = $oai->listSets();
    foreach my $set ($sets->setSpecs()) {
        #print "$set " . encode('UTF-8', $sets->setName($set)) . "\n";
        printf("#%s\n", encode('UTF-8', $sets->setName($set)));
        print("$set\n");
    }
}

elsif ($cmd eq 'harvest') {
    while (my $set = <STDIN>) {

        # Skip blank lines and comments, if ignore_comments is set.
        chomp($set);
        $set =~ s/^\s+//;
        $set =~ s/\s+$//;
        next unless ($set);
        next if ($set =~ /^#/ && $ignore_comments);

        print("Fetching $set\n");

        my $output_dir = "$basedir/$set/data/src";
        if (-d $output_dir) {
            if (! $clobber) {
                print("Skipping existing directory $output_dir\n");
                next;
            }
        }
        else {
            mkpath($output_dir) or die("Cannot create $output_dir: $!\n");
        }
        print("Saving files to $output_dir\n");


        my $finished = 0;
        my $page = 1;
        my $records = $oai->listRecords( 'metadataPrefix' => 'oai_dc', 'set' => $set );

        while ( ! $finished ) {
            my $output_file = "$output_dir/${set}_$page.xml";
            copy($records->file(), $output_file) or die ("Cannot copy " . $records->file() . " to $output_file: $!\n");
            print("Set $page saved to $output_file\n");
            ++$page;
            my $rtoken = $records->resumptionToken();
            if ( $rtoken ) { 
                print("Pausing $pause seconds");
                for (my $i = 0; $i < $pause; ++$i) {
                    sleep(1);
                    print(".");
                }
                print("OK\n");
                print ( "Getting next page\n" );
                $records = $oai->listRecords(resumptionToken => $rtoken->token());
            }
            else { 
                $finished = 1;
            }
        }
    }
}
