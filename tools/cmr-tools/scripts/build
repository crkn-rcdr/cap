#!/usr/bin/perl

# Usage: build TEMPLATE_ID ARCHIVE_ROOT

use strict;
use warnings;
#use lib "/opt/cap-libs/perl/lib/perl5";
use FindBin;
use lib "$FindBin::Bin/../../../CAP/lib";
use CAP::CMR;
use File::Basename;
use File::Glob qw(:glob);
use Getopt::Long;

my $opt_clobber = 1;
my $opt_clean   = 0;

GetOptions(
    'clobber!' => \$opt_clobber,
    'clean!'   => \$opt_clean,
) or die("$!");

my $CMR  = "$FindBin::Bin/../cmr";
my($TEMPLATE) = shift(@ARGV);

foreach my $ROOT (@ARGV) {
    print("Looking in $ROOT for archives\n");

    foreach my $dir (find_archive_dirs($ROOT)) {

        my $data = join('/', $dir, 'data');
        my $src  = join('/', $dir, 'data/src');

        print("Found archive root: $dir\n");
        foreach my $file (bsd_glob("$src/*.xml")) {
            print("Reading source file: $file\n");
            my $outfile = join('/', $data, basename($file));
            if ($opt_clean) {
                if (-f $outfile) {
                    print("Removing $outfile\n");
                    unlink($outfile) or die("That didn't work: $!\n");
                }
            }
            elsif (-f $outfile && ! $opt_clobber) {
                print("Skipping: $outfile exists\n");
            }
            else {
                die("Quitting due to errors. Exit code: $?") if (system("$CMR", '-debug', $TEMPLATE, $file, $outfile));
                print("Wrote $outfile\n");
            }
        }
        print("Creating Bagit archive in $dir\n");
        bagit($dir) or die("Well, that didn't work\n");
    }
}
